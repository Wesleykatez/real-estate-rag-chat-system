name: Dubai Real Estate RAG Chat System - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  CHROMA_PERSIST_DIRECTORY: './test_chroma'
  REDIS_URL: ${{ secrets.REDIS_URL }}
  GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
  JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
  ENVIRONMENT: 'test'

jobs:
  # Job 1: Code Quality and Security Analysis
  code-quality:
    name: Code Quality & Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt
        
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run Black (code formatting)
      run: |
        black --check --diff backend/
        
    - name: Run Flake8 (linting)
      run: |
        flake8 backend/ --max-line-length=88 --extend-ignore=E203,W503
        
    - name: Run MyPy (type checking)
      run: |
        mypy backend/ --ignore-missing-imports
        
    - name: Run ESLint (frontend linting)
      run: |
        cd frontend
        npm run lint
        
    - name: Run Bandit (security analysis)
      run: |
        bandit -r backend/ -f json -o bandit-report.json || true
        
    - name: Run Safety (dependency vulnerability check)
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt
        
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=backend --cov-report=xml --cov-report=html --junitxml=unit-test-results.xml
        coverage report --fail-under=80
        
    - name: Upload unit test results
      uses: actions/upload-artifact@v3
      with:
        name: unit-test-results
        path: |
          unit-test-results.xml
          htmlcov/
          .coverage

  # Job 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt
        
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
      run: |
        pytest tests/integration/ -v --cov=backend --cov-report=xml --cov-report=html --junitxml=integration-test-results.xml
        coverage report --fail-under=80
        
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-results
        path: |
          integration-test-results.xml
          htmlcov/
          .coverage

  # Job 4: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt
        
    - name: Run performance tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
      run: |
        pytest tests/performance/ -v --junitxml=performance-test-results.xml
        
    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: performance-test-results.xml

  # Job 5: Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt
        
    - name: Run security tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
      run: |
        pytest tests/security/ -v --junitxml=security-test-results.xml
        
    - name: Upload security test results
      uses: actions/upload-artifact@v3
      with:
        name: security-test-results
        path: security-test-results.xml

  # Job 6: Load Testing
  load-tests:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: performance-tests
    if: github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt
        pip install locust
        
    - name: Start application
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
      run: |
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
    - name: Run load tests
      run: |
        locust -f tests/load/locustfile.py --headless --users 100 --spawn-rate 10 --run-time 60s --html=load-test-report.html
        
    - name: Upload load test results
      uses: actions/upload-artifact@v3
      with:
        name: load-test-results
        path: load-test-report.html

  # Job 7: Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run unit tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
        
    - name: Run E2E tests
      run: |
        cd frontend
        npm run test:e2e
        
    - name: Upload frontend test results
      uses: actions/upload-artifact@v3
      with:
        name: frontend-test-results
        path: frontend/coverage/

  # Job 8: Docker Build and Test
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [integration-tests, security-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build backend Docker image
      run: |
        docker build -t dubai-estate-backend:test ./backend
        
    - name: Build frontend Docker image
      run: |
        docker build -t dubai-estate-frontend:test ./frontend
        
    - name: Test Docker images
      run: |
        docker run --rm dubai-estate-backend:test python -m pytest tests/unit/ -v
        docker run --rm dubai-estate-frontend:test npm test -- --watchAll=false

  # Job 9: Test Reports and Notifications
  test-reports:
    name: Test Reports & Notifications
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, security-tests, load-tests, frontend-tests, docker-build]
    if: always()
    
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v3
      with:
        path: test-results/
        
    - name: Generate test summary
      run: |
        echo "# Test Results Summary" > test-summary.md
        echo "## Unit Tests" >> test-summary.md
        if [ -f "test-results/unit-test-results/unit-test-results.xml" ]; then
          echo "✅ Unit tests completed" >> test-summary.md
        else
          echo "❌ Unit tests failed" >> test-summary.md
        fi
        
        echo "## Integration Tests" >> test-summary.md
        if [ -f "test-results/integration-test-results/integration-test-results.xml" ]; then
          echo "✅ Integration tests completed" >> test-summary.md
        else
          echo "❌ Integration tests failed" >> test-summary.md
        fi
        
        echo "## Performance Tests" >> test-summary.md
        if [ -f "test-results/performance-test-results/performance-test-results.xml" ]; then
          echo "✅ Performance tests completed" >> test-summary.md
        else
          echo "❌ Performance tests failed" >> test-summary.md
        fi
        
        echo "## Security Tests" >> test-summary.md
        if [ -f "test-results/security-test-results/security-test-results.xml" ]; then
          echo "✅ Security tests completed" >> test-summary.md
        else
          echo "❌ Security tests failed" >> test-summary.md
        fi
        
        echo "## Load Tests" >> test-summary.md
        if [ -f "test-results/load-test-results/load-test-report.html" ]; then
          echo "✅ Load tests completed" >> test-summary.md
        else
          echo "❌ Load tests failed" >> test-summary.md
        fi
        
        echo "## Frontend Tests" >> test-summary.md
        if [ -d "test-results/frontend-test-results" ]; then
          echo "✅ Frontend tests completed" >> test-summary.md
        else
          echo "❌ Frontend tests failed" >> test-summary.md
        fi
        
    - name: Upload test summary
      uses: actions/upload-artifact@v3
      with:
        name: test-summary
        path: test-summary.md
        
    - name: Send notification on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '❌ Test pipeline failed for ${{ github.repository }}#${{ github.run_number }}'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Send notification on success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '✅ Test pipeline passed for ${{ github.repository }}#${{ github.run_number }}'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Job 10: Deployment (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-reports]
    if: github.ref == 'refs/heads/main' && needs.test-reports.result == 'success'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # Add your deployment commands here
        # Example: kubectl apply, docker push, etc.
        
    - name: Health check
      run: |
        echo "Performing health check..."
        # Add health check commands here
        
    - name: Send deployment notification
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '🚀 Successfully deployed to production!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
